import{_ as e,o as a,c as t,O as r}from"./chunks/framework.e2b32f27.js";const _=JSON.parse('{"title":"Characters","description":"","frontmatter":{},"headers":[],"relativePath":"data-types/characters.md","filePath":"data-types/characters.md","lastUpdated":1685120040000}'),c={name:"data-types/characters.md"},o=r('<h1 id="characters" tabindex="-1">Characters <a class="header-anchor" href="#characters" aria-label="Permalink to &quot;Characters&quot;">​</a></h1><p>Characters are a type of <code>Glyph</code> object that represent regular letters in your font.</p><h3 id="unicode" tabindex="-1">Unicode <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;Unicode&quot;">​</a></h3><p>Unicode is the system that fonts use to identify <code>Glyph</code> objects as a specific character. Unicode defines &#39;code points&#39; which is basically just a unique ID number, and a name for that particular character. Unicode code points can be just a regular (decimal) number, but most often they are represented by a hexadecimal number with a <code>U+</code> prefix.</p><p>Unicode is broken down into &#39;planes&#39; - and the first one is called the Basic Multilingual Plane. These are characters <code>U+0000</code> through <code>U+FFFF</code>. Since we&#39;re dealing with hexadecimal numbers, each digit can be one of <code>0123456789ABCDEF</code> for a total of 65,536 Unicode code points in the BMP. Not every Unicode code point has a character associated with it (some are left intentionally blank) but still, there are a huge amount of characters available. In Glyphr Studio, you can enable any range of characters you want (the default is the &#39;Basic Latin&#39; character range).</p><p>If you are curious about exploring Unicode, you can check out Glyphr Studio&#39;s sister project: <a href="https://unicode.ninja" target="_blank" rel="noreferrer">https://unicode.ninja</a> - this is a tool where you can browse through all the character ranges in the BMP, get details on any individual character, or search for characters by name.</p>',6),n=[o];function i(s,h,d,l,u,p){return a(),t("div",null,n)}const b=e(c,[["render",i]]);export{_ as __pageData,b as default};
